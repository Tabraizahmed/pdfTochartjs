{"version":3,"sources":["components/Header.js","components/Footer.js","components/ChakraGraphs/BenchMarkChakraGraph.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","branding","react_default","a","createElement","className","href","defaultProps","Footer","Component","BenchMarkChakraGraph","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","commonOptions","label","backgroundColor","borderColor","fill","radius","pointRadius","pointBorderWidth","pointBackgroundColor","pointBorderColor","pointHoverRadius","labels","ChakraDataSet","datasets","objectSpread","data","options","responsive","legend","display","scale","ticks","callback","backdropColor","ActivationLevelDataSet","es","App","components_Header","ChakraGraphs_BenchMarkChakraGraph","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4JAGMA,SAAS,SAAAC,GAAS,IACdC,EAAaD,EAAbC,SACR,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6EACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,gBACnBJ,GAEHC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,kBAAkBD,UAAU,YAApC,0BAWdN,EAAOQ,aAAe,CACpBN,SAAU,UAOGF,gDCjBAS,mLAZX,OACEN,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,8BAAb,+DALWI,6BCoJNC,cAlJb,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMd,KACDkB,cAAgB,CACnBC,MAAO,UACPC,gBAAiB,cACjBC,YAAa,oBACbC,MAAM,EACNC,OAAQ,EACRC,YAAa,EACbC,iBAAkB,EAClBC,qBAAsB,SACtBC,iBAAkB,oBAClBC,iBAAkB,GAEpBjB,EAAKkB,OAAS,CACZ,eACA,kBACA,cACA,gBACA,uBACA,sBACA,4BACA,2BACA,wBACA,uBACA,mBACA,aACA,gBAEFlB,EAAKmB,cAAgB,CACnBD,OAAQlB,EAAKkB,OACbE,SAAU,CAACnB,OAAAoB,EAAA,EAAApB,CAAA,GAEJD,EAAKO,cAFF,CAGNe,KAAM,CACJ,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,KACA,KACA,KACA,GACA,UAKRtB,EAAKuB,QAAU,CACbC,YAAY,EACZC,OAAQ,CACNC,SAAS,GAGXC,MAAO,CACLC,MAAO,CACLC,SAAU,WACR,MAAO,IAETC,cAAe,sBAIrB9B,EAAK+B,uBAAyB,CAC5Bb,OAAQlB,EAAKkB,OACbE,SAAU,CAACnB,OAAAoB,EAAA,EAAApB,CAAA,GAEJD,EAAKO,cAFF,CAGNe,KAAM,CACJ,KACA,KACA,GACA,GACA,KACA,GACA,KACA,KACA,EACA,EACA,EACA,GACA,GACA,UAvFStB,wEA+FjB,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,6BAAd,8CAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAOV,KAAMnB,KAAKgB,cAAeI,QAASpB,KAAKoB,WAEjDhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAOV,KAAMnB,KAAK4B,uBAAwBR,QAASpB,KAAKoB,YAG5DhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,6VAQAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,8hBAWAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,4LAtIqBI,2BCiBpBmC,MAZf,WACE,OACE1C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyC,EAAD,CAAQ5C,SAAS,cACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAC0C,EAAD,OAEF5C,EAAAC,EAAAC,cAAC2C,EAAD,QCHcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6ff33179.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Header = props => {\r\n  const { branding } = props;\r\n  return (\r\n    <nav className=\"navbar fixed-top navbar-expand-lg navbar-dark bg-main fixed-top mb-3 py-0\">\r\n      <div className=\"container\">\r\n        <a href=\"/\" className=\"navbar-brand\">\r\n          {branding}\r\n        </a>\r\n        <div>\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item\">\r\n              <a href=\"/AdminDashBoard\" className=\"nav-link\">\r\n                Admin Dashboard\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nHeader.defaultProps = {\r\n  branding: \"My App\"\r\n};\r\n\r\nHeader.propTypes = {\r\n  branding: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <footer className=\"py-5 bg-dark\">\r\n        <div className=\"container\">\r\n          <p className=\"m-0 text-center text-white\">\r\n            Copyright &copy; energy-medicine-consulting.com 2019\r\n          </p>\r\n        </div>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\r\nimport { Radar } from \"react-chartjs-2\";\r\n\r\nclass BenchMarkChakraGraph extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.commonOptions = {\r\n      label: \"Set one\",\r\n      backgroundColor: \"transparent\",\r\n      borderColor: \"rgba(200,0,0,0.6)\",\r\n      fill: false,\r\n      radius: 6,\r\n      pointRadius: 6,\r\n      pointBorderWidth: 3,\r\n      pointBackgroundColor: \"orange\",\r\n      pointBorderColor: \"rgba(200,0,0,0.6)\",\r\n      pointHoverRadius: 2\r\n    };\r\n    this.labels = [\r\n      \"Crown Chakra\",\r\n      \"Forehead Chakra\",\r\n      \"Ajna Chakra\",\r\n      \"Throat Chakra\",\r\n      \"Heart Chakra (Front)\",\r\n      \"Heart Chakra (Back)\",\r\n      \"Solar Plex Charka (Front)\",\r\n      \"Solar Plex Charka (Back)\",\r\n      \"Spleen Chakra (Front)\",\r\n      \"Spleen Chakra (Back)\",\r\n      \"Meng Mein Chakra\",\r\n      \"Sex Chakra\",\r\n      \"Basic Chakra\"\r\n    ];\r\n    this.ChakraDataSet = {\r\n      labels: this.labels,\r\n      datasets: [\r\n        {\r\n          ...this.commonOptions,\r\n          data: [\r\n            28,\r\n            26,\r\n            30,\r\n            29,\r\n            28,\r\n            30,\r\n            32,\r\n            31,\r\n            29,\r\n            28.5,\r\n            28.5,\r\n            28.5,\r\n            28.0,\r\n            29.5\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n    this.options = {\r\n      responsive: true,\r\n      legend: {\r\n        display: false\r\n      },\r\n\r\n      scale: {\r\n        ticks: {\r\n          callback: function() {\r\n            return \"\";\r\n          },\r\n          backdropColor: \"rgba(0, 0, 0, 0)\"\r\n        }\r\n      }\r\n    };\r\n    this.ActivationLevelDataSet = {\r\n      labels: this.labels,\r\n      datasets: [\r\n        {\r\n          ...this.commonOptions,\r\n          data: [\r\n            12.5,\r\n            11.5,\r\n            13.0,\r\n            13.0,\r\n            12.5,\r\n            13.0,\r\n            13.5,\r\n            14.5,\r\n            8.0,\r\n            9.0,\r\n            9.0,\r\n            13.0,\r\n            13.0,\r\n            12.5\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3 className=\"card-subtitle text-center\">\r\n          Major chakras size & activation level test\r\n        </h3>\r\n        <div className=\"row mt-5\">\r\n          <div className=\"col-lg-6 col-sm-6 text-center\">\r\n            <h3>BENCHMARK SIZE TEST</h3>\r\n            <Radar data={this.ChakraDataSet} options={this.options} />\r\n          </div>\r\n          <div className=\"col-lg-6 col-sm-6 text-center\">\r\n            <h3>ACTIVATION LEVEL TEST</h3>\r\n            <Radar data={this.ActivationLevelDataSet} options={this.options} />\r\n          </div>\r\n        </div>\r\n        <div className=\"container mt-5 reportbg\">\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-12 col-sm-6\">\r\n              <h2>REPORT</h2>\r\n              <p className=\"text-left\">\r\n                The size of your aura is about 28 cm (approximately 11 inches)\r\n                which is bigger than an orinary person. This should becuase of\r\n                your pranic healing and twin hearts practices. The average\r\n                compared to an ordinary person. The average diameter size of\r\n                chakras in an orinary person is about 3 to 4 inches. As we\r\n                develop, the diameter increases in size.\r\n              </p>\r\n              <p className=\"text-left\">\r\n                Maecenas pulvinar tincidunt vestibulum. Integer congue dignissim\r\n                neque nec fringilla. Maecenas quis elementum ex, at congue\r\n                libero. Nam vel quam vel dolor euismod vestibulum vel at libero.\r\n                Pellentesque nec ipsum interdum, pulvinar enim ac, rutrum neque.\r\n                Phasellus dolor dolor, ultricies eu porta sit amet, lobortis\r\n                quis lorem. In quam ex, condimentum porttitor blandit sit amet,\r\n                pretium quis neque. Curabitur imperdiet convallis ipsum, sed\r\n                dictum urna tincidunt mollis. Nullam et nisl magna. Vestibulum\r\n                rhoncus tellus ut varius tincidunt.\r\n              </p>\r\n              <p className=\"text-left\">\r\n                Pellentesque quis malesuada diam. Ut vitae quam eget ex\r\n                condimentum molestie. className aptent taciti sociosqu ad litora\r\n                torquent per conubia nostra, per inceptos himenaeos.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BenchMarkChakraGraph;\r\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport BenchMarkChakraGraph from \"./components/ChakraGraphs/BenchMarkChakraGraph\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <Header branding=\"Home Page\" />\n      <div className=\"container-fluid py-5 mt-5\">\n        <BenchMarkChakraGraph />\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}